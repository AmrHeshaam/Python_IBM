import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.cluster import KMeans
from sklearn.metrics.pairwise import cosine_similarity

# Sample data (to be replaced with actual data)
courses = pd.DataFrame({
    'course_id': [1, 2, 3, 4, 5],
    'course_title': ['Introduction to Data Science', 'Advanced Machine Learning', 'Basics of Python', 'Deep Learning with TensorFlow', 'Data Visualization with Python'],
    'course_description': [
        'Learn the basics of data science including data analysis and visualization.',
        'An advanced course on machine learning techniques and algorithms.',
        'A beginner-friendly course on Python programming.',
        'Master deep learning using TensorFlow.',
        'Create stunning visualizations with Python.'
    ]
})

# Step 1: Data Preprocessing
vectorizer = TfidfVectorizer(stop_words='english')
X = vectorizer.fit_transform(courses['course_description'])

# Step 2: Clustering
kmeans = KMeans(n_clusters=3, random_state=42)
kmeans.fit(X)
courses['cluster'] = kmeans.labels_

# Step 3: Recommendation Generation
def recommend_courses(course_id, num_recommendations=3):
    idx = courses[courses['course_id'] == course_id].index[0]
    course_cluster = courses.loc[idx, 'cluster']
    similar_courses = courses[courses['cluster'] == course_cluster]
    
    cosine_similarities = cosine_similarity(X[idx], X[similar_courses.index])
    similar_courses['similarity'] = cosine_similarities.flatten()
    recommendations = similar_courses.sort_values(by='similarity', ascending=False).head(num_recommendations)
    
    return recommendations[['course_id', 'course_title', 'similarity']]

# Example: Get recommendations for course_id 1
recommend_courses(1)

# Output the DataFrame
print(courses)
